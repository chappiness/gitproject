library(ggplot2)
mpg
class(mpg)
mpg<-as.data.frame(ggplot2::mpg)
head(mpg)
colSums(is.na(mpg))
library(doBy)
head(orderBy(~year,data=mpg))
head(orderBy(~year+cty,data=mpg))
#### 1. 파악한 데이터를 dplyr 패키지를 이용하여 전처리 및 분석하기 ####
## 1.1 조건에 맞는 데이터 추출하기 : filter() ; '%>%' ctrol+shift+m 핫키
exam<-read.csv('D:/R1/코딩/조은곳에서/inData/exam.csv',head=T)
exam
head(exam)
class(exam)
orderBy(~class,data=exam)
#전교생의 수학,영어,과학평균
apply(exam[,3:5],2,mean)
apply(exam[,-c(1:2)],2,mean)
sapply(exam[,3:5],mean)
sapply(exam[,-c(1:2)],mean)
#1~5반의 수학 평균
tapply(exam$math,exam$class,mean)
#1~5반의 수학,영어,과학 평균
summaryBy(math+english+science~class,data=exam,FUN=c(mean,sd))
#1~5반의 수학,영어,과학 평균
aggregate(exam[,c(3:5)],by=list(exam[,2]),FUN=mean)
#-------------------------------------------------------------------
library(dplyr)
#class가 1인행 추출
head(exam)
exam[exam$class==1,]
subset(exam,class==1)
exam %>%
  filter(class==1)

# class가 1이거나 2이거나 3인 데이터 추출
exam %>%
  filter(class==1 |class==2 | class==3)
exam %>%
  filter(class %in% c(1,2,3))
# class가 1이거나 2이고, english가 80이상인 데이터 추출
exam %>%
  filter(class %in% c(1,2)& english>80)

## 1.2 필요한 변수 추출하기 : select()
exam %>%
  select(math,english,science)
subset(exam,select=c('math','english','science'))  
exam %>%
  select(-math)
# class가 1이거나 2인 행중에서 영어,수학데이터만 출력
exam %>%
  filter(class %in% c(1,2)) %>%
  select(english,math)
# class가 1이거나 2인 행중에서 수학(3번째열),영어(4번째열),
#과학(5번째열)데이터만 출력
exam %>%
  filter(class %in% c(1,2)) %>%
  select(math,english,science)
exam %>%
  filter(class %in% c(1,2)) %>%
  select(math:science)
exam %>%
  filter(class %in% c(1,2)) %>%
  select(3:5)

# class가 1,2,3인 행에서 영어,수학 데이터만 앞 5개만 추출
exam %>%
  filter(class %in% c(1,2,3)) %>%
  select(english,math) %>%
  head(5)
#orderBy,arrange
## 1.3 정렬하기 : arrange()
#math기준으로 오름차순 정렬
exam %>%
  arrange(math)
#math기준으로 내림차순 정렬
exam %>%
  arrange(desc(math)) 
exam %>%
  arrange(desc(-math)) 
#class 오름차순, math내림차순 정렬
exam %>%
  arrange(class,desc(math))
#class 오름차순, math내림차순 정렬
exam %>%
  arrange(class,-math)
# id가 1부터 10인 학생의 영어, 수학성적을 영어성적 기준으로 
#오름차순 정렬하여 top 6만
exam %>%
  filter(id %in% c(1:10)) %>%
  select(english,math) %>%
  arrange(english)
## 3.4 파생변수 추가 : mutate()
exam  %>%
  mutate(total=math+english+science)%>%
  filter(total>200) %>%
  arrange(total) %>%
  head

exam$total<-NULL #total 변수 삭제
head(exam)

exam %>%
  mutate(mean=(math+english+science)/3) %>%
  arrange(mean)

# 파생변수를 한꺼번에 두개이상 추가해서 분석하기
exam %>%
  mutate(total=math+english+science,
         avg=round(math+english+science),
         group=ifelse(total>180,'A','B'))

## 3.5 요약하기 : group_by() + summarise()
# summarise 안에 들어갈 통계치 함수 : mean, sd, min,
#max, median, n(갯수)
exam %>%
  group_by(class) %>%
  summarise(mean_math=mean(math),
            sd_math=sd(math),
            mean_eng=mean(english),
            sd_eng=sd(english),
            cnt=n())
#class mean_math sd_math mean_eng sd_eng   cnt
#<int>     <dbl>   <dbl>    <dbl>  <dbl> <int>
#  1     1      46.2   12.5      94.8   5.85     4
#2     2      61.2   29.5      84.2   6.13     4
#3     3      45     18.7      86.5  15.6      4
#4     4      56.8   13.3      84.8  19.9      4
#5     5      78      9.90     74.2   7.5      4