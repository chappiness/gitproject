6.벡터 보충
ex>A열 B열 C열 <-names(data)
       1     2    3 <-data
1_names(data) 표현방법
  1)c('A열,'B열','C열')
  2)paste(LETTERS[1,3],'열')

2_조건에 맞게 출력
 1)3 %in% data T data에 3있니?
 2)5 %in% data F data에 5있니?
 3)결측지 나왔을떄(na.omit,complete.cases활용)
 4)data>2 >>>출력값:F F T
   data<-data[data>2] T인 값 출력됨

7.여러가지 함수
 1)함수 예시
   add<-function(a=0,b=0){
	return(2*a+b)
	}
   add(1,1) 초기값 0 0  사라지고 1 1 대입
   add(1)  a=1,b=0
   add(b=1,a=2) 순서바꿀때 지정!

  2)character( ):character 벡터 생성하는 함수
    charVec<-character(5) 길이가 5인 벡터
    charVec[1] 이런식으로 데이터 추가 가능(길이 5 이상인 부분도)

  3)numeric( ):numeric 벡터 생성하는 함수
     intVec<-numeric(3) 길이가 3인 벡터
     intVec[] 이용하여 데이터 추가 가능

  4)logical():logical 벡터 생성하는 함수
     logicVec<-logical(4) 길이가 4인 벡터
     logicVec[] 이용하여 데이터 추가 가능

  5)seq:조건에 맞게 나열하는  벡터 함수
   형식:seq(from,to,by)
   -1~10 홀수/짝수 출력
     seq(1,10,2) 홀수
     seq(2,10,2) 짝수
  6)rep:조건에 맞게 반복하는 벡터함수
   형식:rep(x, times = 1, length.out = NA, each = 1)
    순서 바꾸고 싶을땐 선언해주고 하면 됨
    rep(1,5)  #11111
    rep(1,10,8) #11111111
    rep(1:3,3) #123123123
    rep(1:3,each=3,times=3) #111222333 111222333 111222333

  7)벡터의 연산(실수연산과 똑같다)
    c(a,b) a벡터 b벡터 결합(a 옆에 b가 붙는다)
    a%%b 나머지 연산

  8)벡터의 집합연산
   합집합(union(a,b)), 교집합(intersect(a,b)),
   차집합(setdiff(a,b)), 비교(setequal(a,b))

8.list(리스트):복합 구조형(키값 형태로 데이터를 담는다)
   출력 방식
  student<-list(name=c('홍길동','채피니스','이건한'),age=c(25,20,15))
 -$name 이름이 없다면 [[1]]로 출력됨

  [1] "홍길동"   "채피니스" "이건한"  <-student['name'],student$name
  student[[1]][2]=채피니스
 
-$age   이름이 없다면 [[2]]로 출력됨

  [1] 25 20 15          <-student['age'],student$age
  student[[2]][2]=20

-리스트를 벡터로 전환
Vector<-unlist(student) (리스트에 있는 평균 계산할때도 쓰임)
student<-as.list(Vector) 다시 벡터를 list로

