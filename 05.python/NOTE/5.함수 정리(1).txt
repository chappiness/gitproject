------------
##함수##\
------------

-반복해서 사용할 코드를 묶어 놓고 그것에 이름을 붙인 것
-반복해서 사용할 코드는 함수를 이용하면 훨씬 구조적이고 간결한 코드 작성
-함수의 정의 ''' def함수명([매개1,매개2,매개3,매개4]): 명령어1 명령어2 '''

#doctrine>>>'''이 안의 문장을 넣을 수 있다. ''' 일종의 도움말!
def my_function():
    """
이 안의 문장을 넣을 수 있다.
    """
pass

print(my_function.__doc__)  >>이 안의 문장을 넣을 수 있다 출력
-------------------------------------
#함수의 예>>피보나치 수열
-------------------------------------

0,   1,   1,   2,   3,   5,   8,  13,  21,  34,  55
a / b 
     a  / b
           a  / b
def fibonacci(n):
    '''
    매개변수로 들어온 n값 미만의 피보나치 수열 출력
    ex.매개변수로 10 : 0.1.1.2.3.5.8.| 13,21,34,55
    ex.매개변수로 5 :0. 1. 1. 2. 3.
    '''
    a,b=0,1
    while a<n:
        print(a,end='.')
-----------------------------------------------------------------------------------------
#지역변수(함수 안에 들어간 변수(매개변수) vs 전역변수(모든 곳에서 달라지지 않는 변수)
-----------------------------------------------------------------------------------------
a=100 #전역변수
def variable():
    a=200 #지역변수
    print(a)
variable() #200
print(a) #100
>>>>>>>>>>>>>>>>함수 안에서는 a는 200,그 밖에서는 100

--------------------------------------------------------------------------
#렉시컬 특성(전역변수를 함수 안에서 쓰고 싶다면 global로 선언!)
--------------------------------------------------------------------------
a=100
def variable_1():
    print("변수1:",a) >>>>100 나오길 원해 윗줄에 global a를 선언하면 해결됨!
    a=200
    print("변수2:",a)>>>>200 나오길 원해
variable_1()

--------------------------------------------------------------------------
#global 특성과 id 확인(주소 다름)-변수
--------------------------------------------------------------------------
a=100
def variable_1():
    global a
    print("변수1:",a) #변수1: 100
    print("변수1 id:",id(a)) #변수1 id: 140719147660176
    a=200
    print("변수2:",a) #변수2: 200
    print("변수2 id:",id(a)) #변수2 id: 140719147663376
variable_1()

--------------------------------------------------------------------------
#global 특성과 id 확인(주소 다름)-벡터(list,dictionary,set)
--------------------------------------------------------------------------
def fun(f):
    print("변수 1 주소:",id(f)) 
    print(f)
    f.remove(5)
    print("변수 2 주소:",id(f))
    print(f)
L=[1,2,3,4,5] #lsit 주소: 2289011841728
S={1,2,5,3}   #set 주소: 2289010976800
fun(L)
fun(S)

def fun(f):
    print("변수 1 주소:",id(f))
    print(f)
    f['D']=30
    print("변수 2 주소:",id(f))
    print(f)
D={'A':90,'B':30,'C':40} #ditionary 주소: 2289011948224
fun(D) 

#함수의 이름 변경>fibo=fibonacci() 수정후 함수이름=수정전 함수이름

--------------------------------------------------------------------------------------------------
#함수의 매개변수(기본 값,기본 변수,순서 인수,키워드 인수,가변 인수,딕셔너리 매개변수)
--------------------------------------------------------------------------------------------------
def grade(B,A=90):
    return "나의 두 과목 최고점수는:{},{}".format(B,A)

print(grade(B=30))>>리턴값을 출력  #30,90

def grade1(A=90):
    return "나의 한 과목 최고점수는:{}".format(A)

print(grade1())>>리턴값을 출력 #90

>>>>>>>매개변수에서 기본값은 항상 뒤에 있게끔!(그 앞은 기본 변수)

-------------------------------------
매개변수에 기본변수가 list,set,dictionary일떄
-------------------------------------
list_1=[]
def vary(a,L=list_1):>>>L=꼴로 써야 함수값에 1대입할때 오류가 안뜸
    L.append(a)
    return L

vary(1) [1]
vary(2) [1,2]
vary(3) [1,2,3]

def vary1(a,L=[]):
    L.append(a)
    return L
vary1(1)
vary1(2)
vary1(3)

>>>>두 함수 결과는 같음

----------------------------------------------------------------
##순서인수와 키워드 인수(기본값을 갖는 인수)
def function(변수명1,변수명2,변수명3=기본값): 순서인수 키워드인수
#파이썬 함수는 오버로딩 불가!
----------------------------------------------------------------
###투플 매개변수 이용한 가변인수 설정
-----------------------------------------------------------------

##args 앞의 *:args가 튜플로 전달
def add(*args):
    sum=0
    for num in args:
        sum+=num
    return sum

add(1,2)
add(1,2,3)
add(1,2,3,4) >>매개변수 여러개 넣어도 됨!(함수를 여러개 만들 필요 없음!)

#def concat(*args,sep): #매개변수를 sep으로 연결
     return sep.join(args)
concat('A','B','C','D'.'E','-') x
방법1)
concat('A','B','C','D','E',sep='-') A-B-C-D-E

방법2)
def concat(sep,*args):
    return sep.join(args)
concat('-','a','b','c')  a-b-c

-----------------------------------------
###딕셔너리 매개변수 **args
-----------------------------------------
def fun(**args):
    for key,value in args.items():
        print("{}:{}".format(key,value))
fun(name='홍길동',age=20,address='서울')

result)
         name:홍길동
         age:20
         address:서울

#순서인수,튜플인수,딕셔너리인수
def func7(a,*b,**c):
    print('a=',a)
    print('b=',b)
    print('c=',c)
func7(10,1,2,3,4,5,6,7,8,9,0,name='kim',age=30)
result)
      a= 10
      b= (1, 2, 3, 4, 5, 6, 7, 8, 9, 0)
      c= {'name': 'kim', 'age': 30}

----------------------------------------
함수 정의 시 매개변수의 순서
----------------------------------------
***순서인수>튜플인수(*)>키워드인수(기본값)>딕셔너리 인수(**)
def func(a,b,c,*d,e=10,**f):
    print('a=',a)
    print('b=',b)
    print('c=',c)
    print('d=',d)
    print('e=',e)
    print('f=',f)
func(10,20,30,1,2,3,4,5,6,7,e=100,name='kim',age=30,address='서울시')

result)
       a= 10
       b= 20
       c= 30
       d= (1, 2, 3, 4, 5, 6, 7)
       e= 100
       f= {'name': 'kim', 'age': 30, 'address': '서울시'}